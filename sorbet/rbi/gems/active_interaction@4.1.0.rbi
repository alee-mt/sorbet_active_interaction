# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `active_interaction` gem.
# Please instead update this file by running `bin/tapioca gem active_interaction`.

# Manage application specific business logic.
#
# @author Aaron Lasseigne <aaron.lasseigne@gmail.com>
# @author Taylor Fausak <taylor@fausak.me>
#
# source://active_interaction-4.1.0/lib/active_interaction.rb:10
module ActiveInteraction; end

# Common logic for filters that handle `Date`, `DateTime`, and `Time`
#   objects.
#
# @abstract
# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_date_time_filter.rb:10
class ActiveInteraction::AbstractDateTimeFilter < ::ActiveInteraction::Filter
  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_date_time_filter.rb:15
  def accepts_grouped_inputs?; end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_date_time_filter.rb:11
  def database_column_type; end

  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_date_time_filter.rb:31
  def convert(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_date_time_filter.rb:55
  def convert_grouped_input(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_date_time_filter.rb:46
  def convert_string(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_date_time_filter.rb:62
  def format; end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_date_time_filter.rb:66
  def format?; end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_date_time_filter.rb:21
  def klasses; end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_date_time_filter.rb:25
  def matches?(value); end
end

# Common logic for filters that handle numeric objects.
#
# @abstract
# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_numeric_filter.rb:9
class ActiveInteraction::AbstractNumericFilter < ::ActiveInteraction::Filter
  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_numeric_filter.rb:10
  def database_column_type; end

  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_numeric_filter.rb:22
  def convert(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_numeric_filter.rb:37
  def converter(value); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_numeric_filter.rb:16
  def matches?(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/abstract_numeric_filter.rb:41
  def safe_converter(value); end
end

# Implement the minimal ActiveModel interface.
#
# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/concerns/active_modelable.rb:7
module ActiveInteraction::ActiveModelable
  extend ::ActiveSupport::Concern
  extend ::ActiveModel::Naming
  include GeneratedInstanceMethods
  include ::ActiveModel::Conversion
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveInteraction::ActiveModelable::ClassMethods

  # @return [Symbol]
  # @see ActiveModel::Translation#i18n_scope
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/active_modelable.rb:18
  def i18n_scope; end

  # source://activemodel-7.0.3/lib/active_model/naming.rb:244
  def model_name(*_arg0, &_arg1); end

  # @return [Boolean]
  # @see ActiveRecord::Presistence#new_record?
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/active_modelable.rb:25
  def new_record?; end

  # @return [Boolean]
  # @see ActiveRecord::Presistence#persisted?
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/active_modelable.rb:32
  def persisted?; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# source://active_interaction-4.1.0/lib/active_interaction/concerns/active_modelable.rb:36
module ActiveInteraction::ActiveModelable::ClassMethods
  # @return [Symbol]
  # @see ActiveModel::Translation#i18n_scope
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/active_modelable.rb:40
  def i18n_scope; end
end

# Implement the minimal ActiveRecord interface.
#
# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/concerns/active_recordable.rb:7
module ActiveInteraction::ActiveRecordable
  # Returns the column object for the named filter.
  #
  # @example
  #   class Interaction < ActiveInteraction::Base
  #   string :email, default: nil
  #
  #   def execute; end
  #   end
  #
  #   Interaction.new.column_for_attribute(:email)
  #   # => #<ActiveInteraction::FilterColumn:0x007faebeb2a6c8 @type=:string>
  #
  #   Interaction.new.column_for_attribute(:not_a_filter)
  #   # => nil
  # @param name [Symbol] The name of a filter.
  # @return [FilterColumn, nil]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/active_recordable.rb:26
  def column_for_attribute(name); end

  # Returns true if a filter of that name exists.
  #
  # @example
  #   class Interaction < ActiveInteraction::Base
  #   string :email, default: nil
  #
  #   def execute; end
  #   end
  #
  #   Interaction.new.has_attribute?(:email)
  #   # => true
  #
  #   Interaction.new.has_attribute?(:not_a_filter)
  #   # => false
  # @param name [String, Symbol] The name of a filter.
  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/active_recordable.rb:49
  def has_attribute?(name); end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/array_filter.rb:25
class ActiveInteraction::ArrayFilter < ::ActiveInteraction::Filter
  include ::ActiveInteraction::Missable

  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/array_filter.rb:75
  def add_option_in_place_of_name(klass, options); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/array_filter.rb:58
  def adjust_output(value, context); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/array_filter.rb:65
  def convert(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/array_filter.rb:41
  def klasses; end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/array_filter.rb:52
  def matches?(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/array_filter.rb:86
  def method_missing(*_arg0, &block); end

  # @param filter [Filter]
  # @param names [Array<Symbol>]
  # @raise [InvalidFilterError]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/array_filter.rb:103
  def validate!(names); end
end

# The array starts with the class override key and then contains any
# additional options which halt explicit setting of the class.
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/array_filter.rb:30
ActiveInteraction::ArrayFilter::FILTER_NAME_OR_OPTION = T.let(T.unsafe(nil), Hash)

# source://active_interaction-4.1.0/lib/active_interaction/filters/interface_filter.rb:4
class ActiveInteraction::Base
  include ::ActiveModel::Conversion
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveInteraction::ActiveModelable
  include ::ActiveInteraction::ActiveRecordable
  include ::ActiveInteraction::Runnable
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveInteraction::ActiveModelable::ClassMethods
  extend ::ActiveInteraction::Runnable::ClassMethods
  extend ::ActiveInteraction::Hashable
  extend ::ActiveInteraction::Missable

  # @private
  # @return [Base] a new instance of Base
  #
  # source://active_interaction-4.1.0/lib/active_interaction/base.rb:162
  def initialize(inputs = T.unsafe(nil)); end

  # source://activesupport-7.0.3/lib/active_support/callbacks.rb:68
  def __callbacks; end

  # source://activesupport-7.0.3/lib/active_support/callbacks.rb:68
  def __callbacks?; end

  # source://activesupport-7.0.3/lib/active_support/callbacks.rb:940
  def _execute_callbacks; end

  # source://activesupport-7.0.3/lib/active_support/callbacks.rb:928
  def _run_execute_callbacks(&block); end

  # source://activesupport-7.0.3/lib/active_support/callbacks.rb:928
  def _run_type_check_callbacks(&block); end

  # source://activesupport-7.0.3/lib/active_support/callbacks.rb:928
  def _run_validate_callbacks(&block); end

  # source://activesupport-7.0.3/lib/active_support/callbacks.rb:940
  def _type_check_callbacks; end

  # source://activesupport-7.0.3/lib/active_support/callbacks.rb:940
  def _validate_callbacks; end

  # source://activemodel-7.0.3/lib/active_model/validations.rb:52
  def _validators; end

  # source://activemodel-7.0.3/lib/active_model/validations.rb:52
  def _validators?; end

  # Returns `true` if the given key was in the hash passed to {.run}.
  # Otherwise returns `false`. Use this to figure out if an input was given,
  # even if it was `nil`. Keys within nested hash filter can also be checked
  # by passing them in series. Arrays can be checked in the same manor as
  # hashes by passing an index.
  #
  #
  # @example
  #   class Example < ActiveInteraction::Base
  #   integer :x, default: nil
  #   def execute; given?(:x) end
  #   end
  #   Example.run!()        # => false
  #   Example.run!(x: nil)  # => true
  #   Example.run!(x: rand) # => true
  # @example Nested checks
  #   class Example < ActiveInteraction::Base
  #   hash :x, default: {} do
  #   integer :y, default: nil
  #   end
  #   array :a, default: [] do
  #   integer
  #   end
  #   def execute; given?(:x, :y) || given?(:a, 2) end
  #   end
  #   Example.run!()               # => false
  #   Example.run!(x: nil)         # => false
  #   Example.run!(x: {})          # => false
  #   Example.run!(x: { y: nil })  # => true
  #   Example.run!(x: { y: rand }) # => true
  #   Example.run!(a: [1, 2])      # => false
  #   Example.run!(a: [1, 2, 3])   # => true
  # @param input [#to_sym]
  # @return [Boolean]
  # @since 2.1.0
  #
  # source://active_interaction-4.1.0/lib/active_interaction/base.rb:233
  def given?(input, *rest); end

  # Returns the inputs provided to {.run} or {.run!} after being cast based
  #   on the filters in the class.
  #
  # @return [Hash{Symbol => Object}] All inputs passed to {.run} or {.run!}.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/base.rb:190
  def inputs; end

  # source://activemodel-7.0.3/lib/active_model/naming.rb:244
  def model_name(*_arg0, &_arg1); end

  # source://activemodel-7.0.3/lib/active_model/validations.rb:48
  def validation_context; end

  protected

  # source://active_interaction-4.1.0/lib/active_interaction/base.rb:266
  def run_validations!; end

  private

  # source://active_interaction-4.1.0/lib/active_interaction/base.rb:274
  def populate_filters_and_inputs(inputs); end

  # source://active_interaction-4.1.0/lib/active_interaction/base.rb:294
  def type_check; end

  # source://activemodel-7.0.3/lib/active_model/validations.rb:48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport-7.0.3/lib/active_support/callbacks.rb:68
    def __callbacks; end

    # source://activesupport-7.0.3/lib/active_support/callbacks.rb:68
    def __callbacks=(value); end

    # source://activesupport-7.0.3/lib/active_support/callbacks.rb:68
    def __callbacks?; end

    # source://activesupport-7.0.3/lib/active_support/callbacks.rb:932
    def _execute_callbacks; end

    # source://activesupport-7.0.3/lib/active_support/callbacks.rb:936
    def _execute_callbacks=(value); end

    # source://activesupport-7.0.3/lib/active_support/callbacks.rb:932
    def _type_check_callbacks; end

    # source://activesupport-7.0.3/lib/active_support/callbacks.rb:936
    def _type_check_callbacks=(value); end

    # source://activesupport-7.0.3/lib/active_support/callbacks.rb:932
    def _validate_callbacks; end

    # source://activesupport-7.0.3/lib/active_support/callbacks.rb:936
    def _validate_callbacks=(value); end

    # source://activemodel-7.0.3/lib/active_model/validations.rb:52
    def _validators; end

    # source://activemodel-7.0.3/lib/active_model/validations.rb:52
    def _validators=(value); end

    # source://activemodel-7.0.3/lib/active_model/validations.rb:52
    def _validators?; end

    # Get or set the description.
    #
    # @example
    #   core.desc
    #   # => nil
    #   core.desc('Description!')
    #   core.desc
    #   # => "Description!"
    # @param desc [String, nil] What to set the description to.
    # @return [String, nil] The description.
    #
    # source://active_interaction-4.1.0/lib/active_interaction/base.rb:72
    def desc(desc = T.unsafe(nil)); end

    # Get all the filters defined on this interaction.
    #
    # @return [Hash{Symbol => Filter}]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/base.rb:85
    def filters; end

    # @private
    #
    # source://active_interaction-4.1.0/lib/active_interaction/base.rb:93
    def method_missing(*args, &block); end

    private

    # @param klass [Class]
    # @param name [Symbol]
    # @param options [Hash]
    # @raise [InvalidFilterError]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/base.rb:107
    def add_filter(klass, name, options, &block); end

    # @param filter [Filter]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/base.rb:155
    def eagerly_evaluate_default(filter); end

    # Import filters from another interaction.
    #
    # @option options
    # @option options
    # @param klass [Class] The other interaction.
    # @param options [Hash]
    # @return [Hash{Symbol => Filter}]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/base.rb:125
    def import_filters(klass, options = T.unsafe(nil)); end

    # @param klass [Class]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/base.rb:137
    def inherited(klass); end

    # @param filter [Filter]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/base.rb:144
    def initialize_filter(filter); end
  end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/boolean_filter.rb:18
class ActiveInteraction::BooleanFilter < ::ActiveInteraction::Filter
  # source://active_interaction-4.1.0/lib/active_interaction/filters/boolean_filter.rb:21
  def database_column_type; end

  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/boolean_filter.rb:33
  def convert(value); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/boolean_filter.rb:27
  def matches?(value); end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/date_filter.rb:21
class ActiveInteraction::DateFilter < ::ActiveInteraction::AbstractDateTimeFilter; end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/date_time_filter.rb:21
class ActiveInteraction::DateTimeFilter < ::ActiveInteraction::AbstractDateTimeFilter
  # source://active_interaction-4.1.0/lib/active_interaction/filters/date_time_filter.rb:24
  def database_column_type; end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/decimal_filter.rb:19
class ActiveInteraction::DecimalFilter < ::ActiveInteraction::AbstractNumericFilter
  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/decimal_filter.rb:32
  def converter(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/decimal_filter.rb:24
  def digits; end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/decimal_filter.rb:28
  def klass; end
end

# Top-level error class. All other errors subclass this.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:7
class ActiveInteraction::Error < ::StandardError; end

# An extension that provides the ability to merge other errors into itself.
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:92
class ActiveInteraction::Errors < ::ActiveModel::Errors
  # Returns the value of attribute backtrace.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:93
  def backtrace; end

  # Sets the attribute backtrace
  #
  # @param value the value to set the attribute backtrace to.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:93
  def backtrace=(_arg0); end

  # Merge other errors into this one.
  #
  # @param other [Errors]
  # @return [Errors]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:100
  def merge!(other); end

  private

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:108
  def attribute?(attribute); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:112
  def detailed_error?(detail); end

  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:136
  def merge_detail!(attribute, detail, message); end

  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:124
  def merge_details!(other); end

  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:116
  def merge_message!(attribute, message); end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/file_filter.rb:18
class ActiveInteraction::FileFilter < ::ActiveInteraction::Filter
  # source://active_interaction-4.1.0/lib/active_interaction/filters/file_filter.rb:21
  def database_column_type; end

  private

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/file_filter.rb:27
  def matches?(object); end
end

# Describes an input filter for an interaction.
#
# source://active_interaction-4.1.0/lib/active_interaction/filter.rb:14
class ActiveInteraction::Filter
  # @option options
  # @param name [Symbol]
  # @param options [Hash{Symbol => Object}]
  # @return [Filter] a new instance of Filter
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:68
  def initialize(name, options = T.unsafe(nil), &block); end

  # Tells whether or not the filter accepts a group of parameters to form a
  # single input.
  #
  # @example
  #   ActiveInteraction::TimeFilter.new(Time.now).accepts_grouped_inputs?
  #   # => true
  # @example
  #   ActiveInteraction::Filter.new(:example).accepts_grouped_inputs?
  #   # => false
  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:192
  def accepts_grouped_inputs?; end

  # Convert a value into the expected type. If no value is given, fall back
  #   to the default value.
  #
  # @example
  #   ActiveInteraction::Filter.new(:example).clean(0, nil)
  #   # => ActiveInteraction::InvalidValueError: example: 0
  # @example
  #   ActiveInteraction::Filter.new(:example).clean(nil, nil)
  #   # => ActiveInteraction::MissingValueError: example
  # @example
  #   ActiveInteraction::Filter.new(:example, default: nil).clean(nil, nil)
  #   # => nil
  # @example
  #   ActiveInteraction::Filter.new(:example, default: 0).clean(nil, nil)
  #   # => ActiveInteraction::InvalidDefaultError: example: 0
  # @param context [Base, nil]
  # @param value [Object]
  # @raise [MissingValueError] If the value is missing and there is no
  #   default.
  # @raise [InvalidValueError] If the value is invalid.
  # @raise [NoDefaultError] If the default is missing.
  # @raise [InvalidDefaultError] If the default is invalid.
  # @return [Object]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:101
  def clean(value, context); end

  # Gets the type of database column that would represent the filter data.
  #
  # @example
  #   ActiveInteraction::TimeFilter.new(Time.now).database_column_type
  #   # => :datetime
  # @example
  #   ActiveInteraction::Filter.new(:example).database_column_type
  #   # => :string
  # @return [Symbol] A database column type. If no sensible mapping exists,
  #   returns `:string`.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:177
  def database_column_type; end

  # Get the default value.
  #
  # @example
  #   ActiveInteraction::Filter.new(:example).default
  #   # => ActiveInteraction::NoDefaultError: example
  # @example
  #   ActiveInteraction::Filter.new(:example, default: nil).default
  #   # => nil
  # @example
  #   ActiveInteraction::Filter.new(:example, default: 0).default
  #   # => ActiveInteraction::InvalidDefaultError: example: 0
  # @param context [Base, nil]
  # @raise [NoDefaultError] If the default is missing.
  # @raise [InvalidDefaultError] If the default is invalid.
  # @return [Object]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:128
  def default(context = T.unsafe(nil)); end

  # Tells if this filter has a default value.
  #
  # @example
  #   ActiveInteraction::Filter.new(:example).default?
  #   # => false
  # @example
  #   ActiveInteraction::Filter.new(:example, default: nil).default?
  #   # => true
  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:162
  def default?; end

  # Get the description.
  #
  # @example
  #   ActiveInteraction::Filter.new(:example, desc: 'Description!').desc
  #   # => "Description!"
  # @return [String, nil]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:148
  def desc; end

  # @return [Hash{Symbol => Filter}]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:20
  def filters; end

  # @return [Symbol]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:23
  def name; end

  # @return [Hash{Symbol => Object}]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:26
  def options; end

  private

  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:227
  def adjust_output(value, _context); end

  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:199
  def cast(value, context, convert: T.unsafe(nil), reconstantize: T.unsafe(nil)); end

  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:231
  def convert(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:239
  def describe(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:235
  def klass; end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:223
  def matches?(_value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:245
  def raw_default(context); end

  class << self
    # Get the filter associated with a symbol.
    #
    # @example
    #   ActiveInteraction::Filter.factory(:boolean)
    #   # => ActiveInteraction::BooleanFilter
    # @example
    #   ActiveInteraction::Filter.factory(:invalid)
    #   # => ActiveInteraction::MissingFilterError: :invalid
    # @param slug [Symbol]
    # @raise [MissingFilterError] If the slug doesn't map to a filter.
    # @return [Class]
    # @see .slug
    #
    # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:50
    def factory(slug); end

    # @return [Symbol]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:32
    def slug; end

    private

    # @param slug [Symbol]
    # @return [Class]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/filter.rb:59
    def register(slug); end
  end
end

# @return [Hash{Symbol => Class}]
#
# source://active_interaction-4.1.0/lib/active_interaction/filter.rb:16
ActiveInteraction::Filter::CLASSES = T.let(T.unsafe(nil), Hash)

# A minimal implementation of an `ActiveRecord::ConnectionAdapters::Column`.
#
# source://active_interaction-4.1.0/lib/active_interaction/filter_column.rb:5
class ActiveInteraction::FilterColumn
  # @param type [type] The database column type.
  # @private
  # @return [FilterColumn] a new instance of FilterColumn
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter_column.rb:39
  def initialize(type); end

  # @return [nil]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter_column.rb:7
  def limit; end

  # Returns `true` if the column is either of type :integer or :float.
  #
  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter_column.rb:46
  def number?; end

  # Returns `true` if the column is of type :string.
  #
  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter_column.rb:53
  def text?; end

  # @return [Symbol]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filter_column.rb:10
  def type; end

  class << self
    # Find or create the `FilterColumn` for a specific type.
    #
    # @example
    #   FilterColumn.intern(:string)
    #   # => #<ActiveInteraction::FilterColumn:0x007feeaa649c @type=:string>
    #
    #   FilterColumn.intern(:string)
    #   # => #<ActiveInteraction::FilterColumn:0x007feeaa649c @type=:string>
    #
    #   FilterColumn.intern(:boolean)
    #   # => #<ActiveInteraction::FilterColumn:0x007feeab8a08 @type=:boolean>
    # @param type [Symbol] A database column type.
    # @return [FilterColumn]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/filter_column.rb:28
    def intern(type); end
  end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/float_filter.rb:17
class ActiveInteraction::FloatFilter < ::ActiveInteraction::AbstractNumericFilter; end

# Holds a group of inputs together for passing from {Base} to {Filter}s.
#
# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/grouped_input.rb:9
class ActiveInteraction::GroupedInput < ::OpenStruct; end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/hash_filter.rb:23
class ActiveInteraction::HashFilter < ::ActiveInteraction::Filter
  include ::ActiveInteraction::Missable

  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/hash_filter.rb:46
  def adjust_output(value, context); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/hash_filter.rb:36
  def clean_value(hash, name, filter, value, context); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/hash_filter.rb:56
  def convert(value); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/hash_filter.rb:30
  def matches?(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/hash_filter.rb:67
  def method_missing(*args, &block); end

  # @raise [InvalidDefaultError]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/hash_filter.rb:78
  def raw_default(*_arg0); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/hash_filter.rb:42
  def strip?; end
end

# Allow `hash` to be overridden when given arguments and/or a block.
#
# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/concerns/hashable.rb:7
module ActiveInteraction::Hashable
  extend ::ActiveSupport::Concern

  # source://active_interaction-4.1.0/lib/active_interaction/concerns/hashable.rb:10
  def hash(*args, &block); end
end

# Holds inputs passed to the interaction.
#
# source://active_interaction-4.1.0/lib/active_interaction/inputs.rb:5
class ActiveInteraction::Inputs
  # @return [Inputs] a new instance of Inputs
  #
  # source://active_interaction-4.1.0/lib/active_interaction/inputs.rb:76
  def initialize(inputs = T.unsafe(nil)); end

  class << self
    # @private
    # @return [Boolean]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/inputs.rb:17
    def keys_for_group?(keys, group_key); end

    # @param inputs [Hash, ActionController::Parameters, ActiveInteraction::Inputs] Attribute values to set.
    # @private
    #
    # source://active_interaction-4.1.0/lib/active_interaction/inputs.rb:41
    def process(inputs); end

    # Checking `syscall` is the result of what appears to be a bug in Ruby.
    # https://bugs.ruby-lang.org/issues/15597
    #
    # @private
    # @return [Boolean]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/inputs.rb:25
    def reserved?(name); end

    private

    # source://active_interaction-4.1.0/lib/active_interaction/inputs.rb:68
    def assign_to_grouped_input!(inputs, key, index, value); end

    # @raise [ArgumentError]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/inputs.rb:58
    def normalize_inputs!(inputs); end
  end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/integer_filter.rb:20
class ActiveInteraction::IntegerFilter < ::ActiveInteraction::AbstractNumericFilter
  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/integer_filter.rb:25
  def base; end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/integer_filter.rb:29
  def converter(value); end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/interface_filter.rb:28
class ActiveInteraction::InterfaceFilter < ::ActiveInteraction::Filter
  # @return [InterfaceFilter] a new instance of InterfaceFilter
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/interface_filter.rb:31
  def initialize(name, options = T.unsafe(nil), &block); end

  private

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/interface_filter.rb:68
  def checking_class_inheritance?(object, from); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/interface_filter.rb:72
  def class_inherits_from?(klass, inherits_from); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/interface_filter.rb:42
  def from; end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/interface_filter.rb:50
  def matches?(object); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/interface_filter.rb:64
  def matches_methods?(object); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/interface_filter.rb:76
  def singleton_ancestor?(object, from); end
end

# Used by {Runnable} to signal a failure when composing.
#
# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:79
class ActiveInteraction::Interrupt < ::ActiveInteraction::Error
  # @param errors [Runnable]
  # @return [Interrupt] a new instance of Interrupt
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:83
  def initialize(errors); end

  # Returns the value of attribute errors.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:80
  def errors; end
end

# Raised if a converter is invalid.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:17
class ActiveInteraction::InvalidConverterError < ::ActiveInteraction::Error; end

# Raised if a default value is invalid.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:22
class ActiveInteraction::InvalidDefaultError < ::ActiveInteraction::Error; end

# Raised if a filter has an invalid definition.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:27
class ActiveInteraction::InvalidFilterError < ::ActiveInteraction::Error; end

# Raised if an interaction is invalid.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:32
class ActiveInteraction::InvalidInteractionError < ::ActiveInteraction::Error
  # Returns the value of attribute interaction.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:33
  def interaction; end

  # Sets the attribute interaction
  #
  # @param value the value to set the attribute interaction to.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:33
  def interaction=(_arg0); end
end

# Raised if a constant name is invalid.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:12
class ActiveInteraction::InvalidNameError < ::ActiveInteraction::Error; end

# Raised if a user-supplied value to a nested hash input is invalid.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:60
class ActiveInteraction::InvalidNestedValueError < ::ActiveInteraction::InvalidValueError
  # @param filter_name [Symbol]
  # @param input_value [Object]
  # @return [InvalidNestedValueError] a new instance of InvalidNestedValueError
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:68
  def initialize(filter_name, input_value); end

  # @return [Symbol]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:61
  def filter_name; end

  # @return [Object]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/errors.rb:64
  def input_value; end
end

# Raised if a user-supplied value is invalid.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:39
class ActiveInteraction::InvalidValueError < ::ActiveInteraction::Error; end

# Handle common `method_missing` functionality.
#
# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/concerns/missable.rb:7
module ActiveInteraction::Missable
  extend ::ActiveSupport::Concern

  # @param slug [Symbol]
  # @return [Missable]
  # @yield [klass, args, options]
  # @yieldparam klass [Class]
  # @yieldparam args [Array]
  # @yieldparam options [Hash]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/missable.rb:19
  def method_missing(slug, *args); end

  private

  # @param slug [Symbol]
  # @return [Filter, nil]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/missable.rb:34
  def filter(slug); end

  # @param slug [Symbol]
  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/missable.rb:43
  def respond_to_missing?(slug, *_arg1); end
end

# Raised if a filter cannot be found.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:44
class ActiveInteraction::MissingFilterError < ::ActiveInteraction::Error; end

# Raised if no value is given.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:49
class ActiveInteraction::MissingValueError < ::ActiveInteraction::Error; end

# Raised if there is no default value.
#
# @return [Class]
#
# source://active_interaction-4.1.0/lib/active_interaction/errors.rb:54
class ActiveInteraction::NoDefaultError < ::ActiveInteraction::Error; end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/object_filter.rb:28
class ActiveInteraction::ObjectFilter < ::ActiveInteraction::Filter
  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/object_filter.rb:46
  def convert(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/object_filter.rb:56
  def converter(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/object_filter.rb:33
  def klass; end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/object_filter.rb:40
  def matches?(value); end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/record_filter.rb:28
class ActiveInteraction::RecordFilter < ::ActiveInteraction::Filter
  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/record_filter.rb:46
  def convert(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/record_filter.rb:51
  def find(klass, value, finder); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/record_filter.rb:33
  def klass; end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/record_filter.rb:40
  def matches?(value); end
end

# Runs code and provides the result.
#
# @abstract Include and override {#execute} to implement a custom Runnable
#   class.
# @note Must be included after `ActiveModel::Validations`.
# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:12
module ActiveInteraction::Runnable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveInteraction::Runnable::ClassMethods

  # @return [Errors]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:21
  def errors; end

  # @abstract
  # @raise [NotImplementedError]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:28
  def execute; end

  # @return [Object] If there are no validation errors.
  # @return [nil] If there are validation errors.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:34
  def result; end

  # @param result [Object]
  # @return [Object] If there are no validation errors.
  # @return [nil] If there are validation errors.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:41
  def result=(result); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:47
  def valid?(*_arg0); end

  private

  # @param other [Class] The other interaction.
  # @raise [Interrupt]
  # @return [Object] If there are no validation errors.
  # @return [nil] If there are validation errors.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:61
  def compose(other, *args); end

  # @return [nil]
  # @return [Object] If there are no validation errors.
  # @return [nil] If there are validation errors.
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:71
  def run; end

  # @raise [InvalidInteractionError] If there are validation errors.
  # @return [Object]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:85
  def run!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:96
module ActiveInteraction::Runnable::ClassMethods
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:97
  def new(*_arg0); end

  # @return [Runnable]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:111
  def run(*args); end

  # @raise [InvalidInteractionError] If there are validation errors.
  # @return [Object]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/concerns/runnable.rb:120
  def run!(*args); end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/string_filter.rb:20
class ActiveInteraction::StringFilter < ::ActiveInteraction::Filter
  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/string_filter.rb:35
  def adjust_output(value, _context); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/string_filter.rb:39
  def convert(value); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/string_filter.rb:29
  def matches?(value); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/string_filter.rb:25
  def strip?; end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/symbol_filter.rb:16
class ActiveInteraction::SymbolFilter < ::ActiveInteraction::Filter
  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/symbol_filter.rb:27
  def convert(value); end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/symbol_filter.rb:21
  def matches?(value); end
end

# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/filters/time_filter.rb:23
class ActiveInteraction::TimeFilter < ::ActiveInteraction::AbstractDateTimeFilter
  # @raise [InvalidFilterError]
  # @return [TimeFilter] a new instance of TimeFilter
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/time_filter.rb:26
  def initialize(name, options = T.unsafe(nil), &block); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/time_filter.rb:32
  def database_column_type; end

  private

  # source://active_interaction-4.1.0/lib/active_interaction/filters/time_filter.rb:58
  def convert(value); end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/time_filter.rb:42
  def klass; end

  # source://active_interaction-4.1.0/lib/active_interaction/filters/time_filter.rb:50
  def klasses; end

  # @return [Boolean]
  #
  # source://active_interaction-4.1.0/lib/active_interaction/filters/time_filter.rb:38
  def time_with_zone?; end
end

# The version number.
#
# @return [Gem::Version]
#
# source://active_interaction-4.1.0/lib/active_interaction/version.rb:7
ActiveInteraction::VERSION = T.let(T.unsafe(nil), Gem::Version)

# Validates inputs using filters.
#
# @private
#
# source://active_interaction-4.1.0/lib/active_interaction/modules/validation.rb:7
module ActiveInteraction::Validation
  class << self
    # @param context [Base]
    # @param filters [Hash{Symbol => Filter}]
    # @param inputs [Hash{Symbol => Object}]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/modules/validation.rb:12
    def validate(context, filters, inputs); end

    private

    # @param filter [Filter]
    #
    # source://active_interaction-4.1.0/lib/active_interaction/modules/validation.rb:29
    def type(filter); end
  end
end
